<?php

/**
 * Team
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    sf
 * @subpackage model
 * @author     VozdvIN
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Team extends BaseTeam implements IStored, IAuth
{

  //// IStored ////

  static function all()
  {
    return Utils::all('Team', 'name');
  }

  static function byId($id)
  {
    return Utils::byId('Team', $id);
  }

  //// IAuth ////

  static function isModerator(WebUser $account)
  {
    return $account->can(Permission::TEAM_MODER, 0);
  }

  function canBeManaged(WebUser $account)
  {
    return $this->isLeader($account)
    || $account->can(Permission::TEAM_MODER, $this->id);
  }

  function canBeObserved(WebUser $account)
  {
    return $this->isPlayer($account)
    || $account->can(Permission::TEAM_SHOW, $this->id);
  }

  //// Public ////

  /**
   * Проверяет, подавал ли игрок заявку в состав.
   *
   * @param   WebUser   $webUser  Проверяемый игрок
   * @return  boolean             Результат проверки
   */
  public function isCandidate(WebUser $webUser)
  {
    if (!$this->findCandidate($webUser))
    {
      return false;
    }
    return true;
  }

  /**
   * Проверяет, является ли пользователь игроком команды.
   *
   * Капитан также является таковым и проходит проверку успешно.
   * @param   WebUser   $webUser  Проверяемый игрок
   * @return  boolean             Результат проверки
   */
  public function isPlayer(WebUser $webUser)
  {
    if (!$this->findPlayer($webUser))
    {
      return false;
    }
    return true;
  }

  /**
   * Проверяет, является ли игрок капитаном команды.
   *
   * @param   WebUser   $webUser  Проверяемый игрок
   * @return  boolean             Результат проверки
   */
  public function isLeader(WebUser $webUser)
  {
    if (!($res = $this->findPlayer($webUser)))
    {
      return false;
    }
    return $res->is_leader;
  }

  /**
   * Подает заявку в команду.
   * Если игрок уже в команде, ничего не делает.
   *
   * @param   WebUser   $candidate  На кого регистрировать заявку
   * @param   WebUser   $actor      Учетная запись, выполняющая регистрацию заявки
   * @return  mixed                 True если все в порядке, иначе описание ошибки.
   */
  public function postJoin(WebUser $candidate, WebUser $actor)
  {
    if ($this->isPlayer($candidate))
    {
      return 'Пользователь '.$candidate->login.' уже входит в состав команды '.$this->name.'.';
    }
    return $this->addCandidate($candidate);
  }

  /**
   * Отменяет заявку в команду.
   * Если игрок не подавал заявку или уже в команде, то ничего не делает.
   *
   * @param   WebUser   $candidate  Подавший заявку пользователь
   * @param   WebUser   $actor      Учетная запись, выполняющая отмену заявки
   * @return  mixed                 True если все в порядке, иначе описание ошибки.
   */ 
  public function cancelJoin(WebUser $candidate, WebUser $actor)
  {
    if ($this->canBeManaged($actor) || ($candidate->id == $actor->id))
    {
      return $this->removeCandidate($candidate);
    }
    else
    {
      return 'Отменить заявку в состав команды могут только автор заявки или капитан команды.';
    }
  }

  /**
   * Регистрирует игрока в команду с соответсвующей должностью.
   * Если игрок был среди подавших заявку, то заявка удаляется.
   * Если игрок уже в команде, то только меняет ему должность.
   *
   * @param   WebUser   $player     Включаемый в состав игрок
   * @param   boolean   $asLeader   Должность (назначать ли капитаном)
   * @param   WebUser   $actor      Учетная запись, выполняющая регистрацию
   * @return  mixed                 True если все в порядке, иначе описание ошибки.
   */
  public function registerPlayer(WebUser $player, $asLeader, WebUser $actor)
  {
    if (!$this->canBeManaged($actor))
    {
      return Utils::cannotMessage($actor->login, 'регистрировать игрока');
    }
    return $this->addPlayer($player, $asLeader);
  }

  /**
   * Увольняет игрока из команды.
   * Если игрок не в команде, ничего не делает.
   *
   * @param   WebUser   $player  Исключаемый из состава игрок
   * @param   WebUser   $actor   Учетная запись, выполняющая увольнение
   * @return  mixed              True если все в порядке, иначе описание ошибки.
   */
  public function unregisterPlayer(WebUser $player, WebUser $actor)
  {
    if ($this->canBeManaged($actor) || ($actor->id == $player->id))
    {
      return $this->removePlayer($player);
    }
    else
    {
      return Utils::cannotMessage($actor->login, 'уволить игрока');
    }
  }

  /**
   * Возвращает список капитанов.
   *
   * @return  Doctrine_Collection   Или false, если капитанов нет.
   */
  public function getLeaders()
  {
    $res = new Doctrine_Collection('TeamPlayer');
    foreach ($this->teamPlayers as $teamPlayer)
    {
      if ($teamPlayer->is_leader > 0)
      {
        $res->add($teamPlayer);
      }
    }
    return ($res->count() > 0) ? $res : false;
  }
  
  /**
   * Возвращает список рядовых игроков. Если есть только капитаны также вернет false.
   *
   * @return  Doctrine_Collection   Или false, если радовых нет.
   */
  public function getPlayersStrict()
  {
    $res = new Doctrine_Collection('TeamPlayer');
    foreach ($this->teamPlayers as $teamPlayer)
    {
      if ($teamPlayer->is_leader == 0)
      {
        $res->add($teamPlayer);
      }
    }
    return ($res->count() > 0) ? $res : false;    
  }
  
  //// Self ////

  /**
   * Ищет заявку указанного игрока.
   *
   * @param   WebUser           $candidate  Автор заявки
   * @return  Doctrine_Record               Или false, если не найден.
   */
  protected function findCandidate(WebUser $candidate)
  {
    foreach ($this->teamCandidates as $teamCandidate)
    {
      if ($teamCandidate->WebUser->id == $candidate->id)
      {
        return $teamCandidate;
      }
    }
    return false;
  }

  /**
   * Ищет командную карточку указанного игрока.
   *
   * @param   WebUser           $candidate  Автор заявки
   * @return  Doctrine_Record               Или false, если не найден.
   */
  protected function findPlayer(WebUser $candidate)
  {
    foreach ($this->teamPlayers as $teamPlayer)
    {
      if ($teamPlayer->web_user_id == $candidate->id)
      {
        return $teamPlayer;
      }
    }
    return false;
  }

  /**
   * Добавляет заявку в команду.
   * 
   * @param   WebUser   $candidate  От кого подается заявка
   * @return  mixed                 True при успехе, иначе строку с ошибкой
   */
  protected function addCandidate(WebUser $candidate)
  {
    $new = new TeamCandidate;
    $new->team_id = $this->id;
    $new->web_user_id = $candidate->id;
    $new->save();
  }

  /**
   * Удаляет заявку в команду.
   *
   * @param   WebUser   $candidate  От кого подается заявка
   * @return  mixed                 True при успехе, иначе строку с ошибкой
   */
  protected function removeCandidate(WebUser $candidate)
  {
    if (!$this->isCandidate($candidate))
    {
      return true;
    }
    $teamCandidate = $this->findCandidate($candidate);
    $teamCandidate->delete();
    return true;
  }

  /**
   * Добавляет игрока в команду делая при необходимости капитаном.
   * Автоматически удаляется заявка от этого игрока, если есть.
   * Если игрок уже в команде - только меняет ему статус.
   *
   * @param   WebUser   $candidate  Кто включается в команду
   * @param   boolean   $makeLeader Назначить капитаном
   * @return  mixed                 True при успехе, иначе строку с ошибкой
   */
  protected function addPlayer(WebUser $player, $makeLeader)
  {
    if ($this->isCandidate($player))
    {
      $this->removeCandidate($player);
    }
    $teamPlayer = $this->findPlayer($player);
    if (!$teamPlayer)
    {
      $teamPlayer = new TeamPlayer;
      $teamPlayer->team_id = $this->id;
      $teamPlayer->web_user_id = $player->id;
    }
    $teamPlayer->is_leader = $makeLeader;
    $teamPlayer->save();
    return true;
  }

  /**
   * Убирает игрока из команды.
   *
   * @param   WebUser   $candidate  Кто включается в команду
   * @return  mixed                 True при успехе, иначе строку с ошибкой
   */
  protected function removePlayer(WebUser $player)
  {
    if (!$this->isPlayer($player))
    {
      return true;
    }
    $teamPlayer = $this->findPlayer($player);
    $teamPlayer->delete(); //Ситуация отсутствия игрока проверена чуть выше.
  }

}