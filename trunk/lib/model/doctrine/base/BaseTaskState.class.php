<?php

/**
 * BaseTaskState
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $team_state_id
 * @property integer $task_id
 * @property integer $given_at
 * @property integer $started_at
 * @property integer $accepted_at
 * @property integer $task_idle_time
 * @property integer $done_at
 * @property integer $task_time_spent
 * @property boolean $closed
 * @property integer $status
 * @property integer $task_last_update
 * @property TeamState $TeamState
 * @property Task $Task
 * @property Doctrine_Collection $postedAnswers
 * @property Doctrine_Collection $usedTips
 * 
 * @method integer             getId()               Returns the current record's "id" value
 * @method integer             getTeamStateId()      Returns the current record's "team_state_id" value
 * @method integer             getTaskId()           Returns the current record's "task_id" value
 * @method integer             getGivenAt()          Returns the current record's "given_at" value
 * @method integer             getStartedAt()        Returns the current record's "started_at" value
 * @method integer             getAcceptedAt()       Returns the current record's "accepted_at" value
 * @method integer             getTaskIdleTime()     Returns the current record's "task_idle_time" value
 * @method integer             getDoneAt()           Returns the current record's "done_at" value
 * @method integer             getTaskTimeSpent()    Returns the current record's "task_time_spent" value
 * @method boolean             getClosed()           Returns the current record's "closed" value
 * @method integer             getStatus()           Returns the current record's "status" value
 * @method integer             getTaskLastUpdate()   Returns the current record's "task_last_update" value
 * @method TeamState           getTeamState()        Returns the current record's "TeamState" value
 * @method Task                getTask()             Returns the current record's "Task" value
 * @method Doctrine_Collection getPostedAnswers()    Returns the current record's "postedAnswers" collection
 * @method Doctrine_Collection getUsedTips()         Returns the current record's "usedTips" collection
 * @method TaskState           setId()               Sets the current record's "id" value
 * @method TaskState           setTeamStateId()      Sets the current record's "team_state_id" value
 * @method TaskState           setTaskId()           Sets the current record's "task_id" value
 * @method TaskState           setGivenAt()          Sets the current record's "given_at" value
 * @method TaskState           setStartedAt()        Sets the current record's "started_at" value
 * @method TaskState           setAcceptedAt()       Sets the current record's "accepted_at" value
 * @method TaskState           setTaskIdleTime()     Sets the current record's "task_idle_time" value
 * @method TaskState           setDoneAt()           Sets the current record's "done_at" value
 * @method TaskState           setTaskTimeSpent()    Sets the current record's "task_time_spent" value
 * @method TaskState           setClosed()           Sets the current record's "closed" value
 * @method TaskState           setStatus()           Sets the current record's "status" value
 * @method TaskState           setTaskLastUpdate()   Sets the current record's "task_last_update" value
 * @method TaskState           setTeamState()        Sets the current record's "TeamState" value
 * @method TaskState           setTask()             Sets the current record's "Task" value
 * @method TaskState           setPostedAnswers()    Sets the current record's "postedAnswers" collection
 * @method TaskState           setUsedTips()         Sets the current record's "usedTips" collection
 * 
 * @package    sf
 * @subpackage model
 * @author     VozdvIN
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTaskState extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('task_states');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('team_state_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('task_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('given_at', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('started_at', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('accepted_at', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('task_idle_time', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('done_at', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('task_time_spent', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('closed', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));
        $this->hasColumn('status', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('task_last_update', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));


        $this->index('ui_team_state_task', array(
             'type' => 'unique',
             'fields' => 
             array(
              0 => 'team_state_id',
              1 => 'task_id',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('TeamState', array(
             'local' => 'team_state_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Task', array(
             'local' => 'task_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('PostedAnswer as postedAnswers', array(
             'local' => 'id',
             'foreign' => 'task_state_id'));

        $this->hasMany('UsedTip as usedTips', array(
             'local' => 'id',
             'foreign' => 'task_state_id'));
    }
}