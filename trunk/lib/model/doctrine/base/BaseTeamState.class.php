<?php

/**
 * BaseTeamState
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $team_id
 * @property integer $game_id
 * @property integer $start_delay
 * @property boolean $ai_enabled
 * @property integer $started_at
 * @property integer $finished_at
 * @property integer $status
 * @property integer $task_state_id
 * @property integer $task_id
 * @property integer $team_last_update
 * @property Team $Team
 * @property Game $Game
 * @property Task $Task
 * @property Doctrine_Collection $taskStates
 * 
 * @method integer             getId()               Returns the current record's "id" value
 * @method integer             getTeamId()           Returns the current record's "team_id" value
 * @method integer             getGameId()           Returns the current record's "game_id" value
 * @method integer             getStartDelay()       Returns the current record's "start_delay" value
 * @method boolean             getAiEnabled()        Returns the current record's "ai_enabled" value
 * @method integer             getStartedAt()        Returns the current record's "started_at" value
 * @method integer             getFinishedAt()       Returns the current record's "finished_at" value
 * @method integer             getStatus()           Returns the current record's "status" value
 * @method integer             getTaskStateId()      Returns the current record's "task_state_id" value
 * @method integer             getTaskId()           Returns the current record's "task_id" value
 * @method integer             getTeamLastUpdate()   Returns the current record's "team_last_update" value
 * @method Team                getTeam()             Returns the current record's "Team" value
 * @method Game                getGame()             Returns the current record's "Game" value
 * @method Task                getTask()             Returns the current record's "Task" value
 * @method Doctrine_Collection getTaskStates()       Returns the current record's "taskStates" collection
 * @method TeamState           setId()               Sets the current record's "id" value
 * @method TeamState           setTeamId()           Sets the current record's "team_id" value
 * @method TeamState           setGameId()           Sets the current record's "game_id" value
 * @method TeamState           setStartDelay()       Sets the current record's "start_delay" value
 * @method TeamState           setAiEnabled()        Sets the current record's "ai_enabled" value
 * @method TeamState           setStartedAt()        Sets the current record's "started_at" value
 * @method TeamState           setFinishedAt()       Sets the current record's "finished_at" value
 * @method TeamState           setStatus()           Sets the current record's "status" value
 * @method TeamState           setTaskStateId()      Sets the current record's "task_state_id" value
 * @method TeamState           setTaskId()           Sets the current record's "task_id" value
 * @method TeamState           setTeamLastUpdate()   Sets the current record's "team_last_update" value
 * @method TeamState           setTeam()             Sets the current record's "Team" value
 * @method TeamState           setGame()             Sets the current record's "Game" value
 * @method TeamState           setTask()             Sets the current record's "Task" value
 * @method TeamState           setTaskStates()       Sets the current record's "taskStates" collection
 * 
 * @package    sf
 * @subpackage model
 * @author     VozdvIN
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTeamState extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('team_states');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('team_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('game_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('start_delay', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('ai_enabled', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => true,
             ));
        $this->hasColumn('started_at', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('finished_at', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('status', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('task_state_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('task_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('team_last_update', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));


        $this->index('ui_team_game', array(
             'type' => 'unique',
             'fields' => 
             array(
              0 => 'team_id',
              1 => 'game_id',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Team', array(
             'local' => 'team_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Game', array(
             'local' => 'game_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Task', array(
             'local' => 'task_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasMany('TaskState as taskStates', array(
             'local' => 'id',
             'foreign' => 'team_state_id'));
    }
}